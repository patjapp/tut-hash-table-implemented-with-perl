#!/usr/bin/env perl
use 5.018;
use strict;
use warnings;

use Test::More;
#use Data::Dumper;

my $class = 'Hash';
use_ok( $class );
use Hash;

my $hash = new Hash();
isa_ok( $hash, $class );
can_ok( $hash, 'new'  );
can_ok( $hash, 'store' );
can_ok( $hash, 'fetch' );
can_ok( $hash, 'hash' );
can_ok( $hash, 'lookup' );
can_ok( $hash, 'getNoOfBuckets' );
can_ok( $hash, 'exists' );
can_ok( $hash, 'getNoOfKeys' );

my @data = (
	[ qw/ a A  97 0 / ], #1
	[ qw/ b B  98 0 / ], #2
	[ qw/ c C  99 0 / ], #3
	[ qw/ d D 100 0 / ], #4
	[ qw/ e E 101 0 / ], #5
	[ qw/ f F 102 0 / ], #6
	[ qw/ g G 103 0 / ], #7
	[ qw/ h H 104 1 / ], #8
);

my $count;
foreach (@data) {
	$hash->store( $_->[0], $_->[1] );
	ok( $hash->exists($_->[0]), "hash with key >$_->[0]< exists"  );
	
	ok( ++$count==$hash->getNoOfKeys, "number of stored keys: $count" );
}

ok( $hash->fetch( $_->[0] ) eq $_->[1], "fetch key >$_->[0]< with value >$_->[1]<" ) foreach (@data);
ok( !defined $hash->fetch("x"), 'fetch undefined key should be >undef<' );

ok( $hash->hash( $_->[0] ) == $_->[2], "test hash method for key >$_->[0]<" ) foreach (@data);

ok( $hash->getNoOfBuckets == 7, "default for no_of_buckets" );
ok( eq_array( [ ($hash->lookup($_->[0]))[0], ($hash->lookup($_->[0]))[1] ], [ $_->[2] % $hash->getNoOfBuckets, $_->[3] ] ), "test lookup for key >$_->[0]<"  ) foreach (@data);


done_testing;

#print Dumper $hash;

exit 0;
